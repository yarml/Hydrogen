## Hydrogen code


global var   a : num
global const b : num = 2
local  var   c : num = 3
local  const d : num = 0

global const p : num* = &a

decl func test(: num, : ptr) returns bool

global func main(argc : num, argv : str*) returns num:
    e : num = b
    while e != 10:
        printf("e: %d\n", e)
        ++e
    a = 10
    f : num = 0

    *p = c

    retype p : i16*

    p[0] = d
    res := test(argc, p) # automatic type
    if not res:
        test(arc, 0)
        return 1
    return 0

## NASM equivalent
# some calculations that are done before generating code
# func main stack size: 9b
# func main:e  : RBP - 8
# func main:f  : RBP - 12
# func main:res: RBP - 16

# Actual compiler will generate mangled names
# Export all global functions
global main

# Export all global data
global a
global b
global p

# Import external symbols
extern test

section .bss
a: resd 1
